/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import clases.Usuario;
import static forms.crearGasto.getArrayFromJson;
import static forms.crearGasto.getJSONString;
import static forms.crearGasto.getObj;
import java.util.ArrayList;
import javax.swing.table.*;
import clases.*;
import java.io.FileReader;
import java.util.Collections;
import java.util.Comparator;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;

/*
 *
 * @author ezequ
 */
public class muestraGatos extends javax.swing.JFrame {

    String userGastos = "";
    float montoTotal = 0;
    float totalGastosServicios = 0;
    float totalGastosCompras = 0;
    float totalGastosBares = 0;
    float totalGastosEntretenimiento = 0;
    float totalGastosSupermercado = 0;
    float totalGastosOtro = 0;
    ArrayList gastosAOrdenar = new ArrayList();

    /**
     * Creates new form muestraGatos
     */
    public muestraGatos(String user) {
        initComponents();
        userGastos = user;
        cargarTabla(user);
        float nuevoSaldo = actualizarSaldo();
        System.out.println(nuevoSaldo);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnVolver = new javax.swing.JButton();
        btnGrafico = new javax.swing.JButton();
        btnMenorAMayor = new javax.swing.JButton();
        listaOrdenar = new javax.swing.JComboBox<>();
        lblSaldo = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        jLabel1.setText("Muestra de Gastos");

        jScrollPane1.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Monto", "Fecha", "Categoria", "Comentario"
            }
        ));
        table.setEnabled(false);
        jScrollPane1.setViewportView(table);

        btnVolver.setBackground(new java.awt.Color(16, 125, 216));
        btnVolver.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        btnVolver.setForeground(new java.awt.Color(250, 250, 250));
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnGrafico.setBackground(new java.awt.Color(16, 125, 216));
        btnGrafico.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        btnGrafico.setForeground(new java.awt.Color(250, 250, 250));
        btnGrafico.setText("Gráfico");
        btnGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficoActionPerformed(evt);
            }
        });

        btnMenorAMayor.setBackground(new java.awt.Color(16, 125, 216));
        btnMenorAMayor.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        btnMenorAMayor.setForeground(new java.awt.Color(250, 250, 250));
        btnMenorAMayor.setText("Ordenar");
        btnMenorAMayor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenorAMayorActionPerformed(evt);
            }
        });

        listaOrdenar.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        listaOrdenar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Precio: de menor a mayor", "Precio: de mayor a menor", "Fecha: de más antiguo a más reciente", "Fecha: de más reciente a más antiguo" }));

        lblSaldo.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        lblSaldo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSaldo.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(21, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btnMenorAMayor)
                            .addComponent(listaOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSaldo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnGrafico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnVolver)))))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSaldo)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGrafico)
                    .addComponent(btnVolver)
                    .addComponent(listaOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(btnMenorAMayor)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        main volver = new main(userGastos);
        volver.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnMenorAMayorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenorAMayorActionPerformed

        String opcion = (String) listaOrdenar.getSelectedItem();
        try {
            switch (opcion) {
                case "Precio: de menor a mayor" ->
                    Collections.sort(gastosAOrdenar, Comparator.comparing(Gasto::getMonto));
                case "Precio: de mayor a menor" -> {
                    Collections.sort(gastosAOrdenar, Comparator.comparing(Gasto::getMonto));
                    Collections.reverse(gastosAOrdenar);
                }
                case "Fecha: de más antiguo a más reciente" ->
                    Collections.sort(gastosAOrdenar, Comparator.comparing(Gasto::getFechaRealizado));
                case "Fecha: de más reciente a más antiguo" -> {
                    Collections.sort(gastosAOrdenar, Comparator.comparing(Gasto::getFechaRealizado));
                    Collections.reverse(gastosAOrdenar);
                }
                default ->
                    throw new AssertionError();
            }
            aniadirALaTabla(gastosAOrdenar);
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_btnMenorAMayorActionPerformed

    private void btnGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficoActionPerformed
        crearGrafico();
    }//GEN-LAST:event_btnGraficoActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGrafico;
    private javax.swing.JButton btnMenorAMayor;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblSaldo;
    private javax.swing.JComboBox<String> listaOrdenar;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public void cargarTabla(String user) {
        try {
            String jsonData = getJSONString(".\\src\\forms\\dataSrc/" + user + ".json");
            ArrayList gastos = getArrayFromJson(jsonData);
            Usuario usuario = getObj(user, gastos);
            carga(usuario, jsonData);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void carga(Usuario user, String jsonString) {
        try {
            JSONObject jsonObj = new JSONObject(jsonString);
            JSONArray result = jsonObj.getJSONArray("gastos");
            DefaultTableModel modelo = (DefaultTableModel) table.getModel();
            for (int i = 0; i < result.length(); i++) {
                JSONObject jsonObject = result.getJSONObject(i);
                Object[] fila = new Object[4];
                fila[0] = jsonObject.get("monto");
                fila[1] = jsonObject.get("fechaRealizado");
                fila[2] = jsonObject.get("categoria");
                fila[3] = jsonObject.get("comentarioAdicional");
                modelo.addRow(fila);
                table.setModel(modelo);
                montoTotal += (float) jsonObject.getFloat("monto");
                Gasto gasto = new Gasto((float) jsonObject.getFloat("monto"), (String) jsonObject.get("fechaRealizado"),
                        (String) jsonObject.get("categoria"), (String) jsonObject.get("comentarioAdicional"));
                gastosAOrdenar.add(gasto);
                switch ((String) jsonObject.get("categoria")) {
                    case "Servicios" ->
                        totalGastosServicios += (float) jsonObject.getFloat("monto");
                    case "Compras" ->
                        totalGastosCompras += (float) jsonObject.getFloat("monto");
                    case "Restaurantes y bares" ->
                        totalGastosBares += (float) jsonObject.getFloat("monto");
                    case "Entretenimiento" ->
                        totalGastosEntretenimiento += (float) jsonObject.getFloat("monto");
                    case "Supermercado" ->
                        totalGastosSupermercado += (float) jsonObject.getFloat("monto");
                    case "Otro" ->
                        totalGastosOtro += (float) jsonObject.getFloat("monto");
                    default ->
                        throw new AssertionError();
                }

            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void crearGrafico() {
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        if (totalGastosServicios != 0) {
            pieDataset.setValue("Servicios", obtenerPorcentaje(totalGastosServicios));
        }
        if (totalGastosCompras != 0) {
            pieDataset.setValue("Compras", obtenerPorcentaje(totalGastosCompras));
        }
        if (totalGastosBares != 0) {
            pieDataset.setValue("Bares", obtenerPorcentaje(totalGastosBares));
        }
        if (totalGastosEntretenimiento != 0) {
            pieDataset.setValue("Entretenimiento", obtenerPorcentaje(totalGastosEntretenimiento));
        }
        if (totalGastosSupermercado != 0) {
            pieDataset.setValue("Supermercado", obtenerPorcentaje(totalGastosSupermercado));
        }
        if (totalGastosOtro != 0) {
            pieDataset.setValue("Otro", obtenerPorcentaje(totalGastosOtro));
        }
        JFreeChart chart = ChartFactory.createPieChart3D("Gastos", pieDataset, true, true, true);
        ChartFrame frame = new ChartFrame("Gastos", chart);
        frame.setVisible(true);
        frame.setSize(450, 500);
        System.out.println(obtenerPorcentaje(totalGastosServicios) + obtenerPorcentaje(totalGastosBares)
                + obtenerPorcentaje(totalGastosCompras) + obtenerPorcentaje(totalGastosEntretenimiento)
                + obtenerPorcentaje(totalGastosOtro) + obtenerPorcentaje(totalGastosSupermercado));
    }

    public float obtenerPorcentaje(float gastos) {
        return (gastos * 100) / montoTotal;
    }

    public void aniadirALaTabla(ArrayList<Gasto> gastos) {
        try {
            DefaultTableModel modelo = (DefaultTableModel) table.getModel();
            modelo.setRowCount(0);
            modelo.setColumnCount(4);
            for (int i = 0; i < gastos.size(); i++) {
                Object[] fila = new Object[4];
                fila[0] = gastos.get(i).getMonto();
                fila[1] = gastos.get(i).getFechaRealizado();
                fila[2] = gastos.get(i).getCategoria();
                fila[3] = gastos.get(i).getComentarioAdicional();
                modelo.addRow(fila);
                table.setModel(modelo);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public float actualizarSaldo() {
        try {
            JSONParser parser = new JSONParser();
            Object obj = parser.parse(new FileReader(".\\src\\forms\\dataSrc/" + userGastos + ".json"));
            org.json.simple.JSONObject jsonObjectA = (org.json.simple.JSONObject) obj;
            Long saldoLong = (Long) jsonObjectA.get("saldo");
            float saldo = Float.parseFloat(saldoLong.toString());
            lblSaldo.setText("El saldo disponible es de $" + (saldo - montoTotal));
            return saldo;
        } catch (Exception e) {
            System.out.println(e);
        }
        return -1;
    }
    

}
